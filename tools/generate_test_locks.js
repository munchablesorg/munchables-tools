/*
Reads the locks csv file and outputs the same file with the accounts
generated by a hd wallet and divides all quantities by 10000
 */

import dotenv from 'dotenv';
dotenv.config();

import fs from "fs";
import {parse} from "csv-parse";
import HDWallet from "ethereum-hdwallet";
import {BigNumber, ethers} from "ethers";

const mnemonic = process.env.TESTNET_WALLET_MNEMONIC;
const hdwallet = HDWallet.fromMnemonic(mnemonic);
const wallet = hdwallet.derive(`m/44'/60'/0'/0`);
let wallet_index = 0;
const count_test = 500;

(async () => {
    const infile = './locks-collated.csv';
    const outfile = './locks-collated-test.csv';
    const parser = fs
        .createReadStream(infile)
        .pipe(parse({}));
    let csv_data = [];
    let totals = {
        1: BigNumber.from(0),
        2: BigNumber.from(0),
        3: BigNumber.from(0)
    };
    for await (const record of parser) {
        // For testnet, swap account and divide quantity by 10000
        if (process.env.BLAST_ENV === 'testnet'){
            record[0] = `0x${wallet.derive(wallet_index++).getAddress().toString('hex')}`;
            const qty_bn = BigNumber.from(record[1]);
            record[1] =  (qty_bn.div(BigNumber.from(10000))).toString();
        }
        const [account, quantity, token_type] = record;

        totals[token_type] = totals[token_type].add(BigNumber.from(quantity));

        csv_data.push(`${account},${quantity},${token_type}`);
        if (csv_data.length >= count_test && process.env.BLAST_ENV === 'testnet'){
            console.log('Totals', totals);
            console.log(`ETH : ${totals[1].toString()} ${ethers.utils.formatEther(totals[1])}`);
            console.log(`USDB : ${totals[2].toString()} ${ethers.utils.formatEther(totals[2])}`);
            console.log(`WETH : ${totals[3].toString()} ${ethers.utils.formatEther(totals[3])}`);
            break;
        }
    }
    fs.writeFile(outfile, csv_data.join(`\n`), () => {
        console.log(`${outfile} written`);
        process.exit(0);
    })
})();